;; -*- mode: common-lisp -*-
(in-package :fl.materials)

(define-material unlit-color
    (:enabled t
     :shader 'fl.shaders:unlit-color)

  ;; No uniform data for this shader.

  )

(define-material unlit-color-decal
    (:enabled t
     :shader 'fl.shaders:unlit-color-decal)

  ;; No uniform data for this shader.

  )

(define-material unlit-texture
    (:enabled t
     :shader 'fl.shaders:unlit-texture)

  ;; Uniform data.
  ;;
  ;; Any :sampler-2d types will ultimately be converted into the right
  ;; thing when this material is used.
  (uniforms
   (:tex.sampler1 "data/texture/debug.png")))

(define-material unlit-texture-decal
    (:enabled t
     :shader 'fl.shaders:unlit-texture-decal)

  ;; Uniform data.
  ;;
  ;; Any :sampler-2d types will ultimately be converted into the right
  ;; thing when this material is used.
  (uniforms
   (:tex.sampler1 "data/texture/debug.png")))


;; NOTE: If there is a problem looking up a material, this is what a material
;; will become to indicate there is a problem.
(define-material missing-material
    (:enabled t
     :shader 'fl.shaders:unlit-texture)

  (uniforms
   (:tex.sampler1 "data/texture/missing-material.png")))

(define-material pbr-damaged-helmet
    (:enabled t
     :shader 'fl.shaders:pbr-damaged-helmet)

  (uniforms
   ;; metallic first, roughness second
   (:metallic-roughness-values (v2:make 1.0 1.0))
   (:metallic-roughness-sampler "data/texture/Default_metalRoughness.png")
   (:base-color-sampler "data/texture/Default_albedo.png")
   (:base-color-factor (v4:make 1.0 1.0 1.0 1.0))
   (:normal-sampler "data/texture/Default_normal.png")
   (:normal-scale 1.0)
   ;; NOTE: This vector points TOWARDS the light.
   (:light-direction (v3:make 0.0 1.0 1.0))
   (:light-color (v3:make 1.0 1.0 1.0))
   (:occlusion-sampler "data/texture/Default_AO.png")
   (:occlusion-strength 1.0)
   (:emissive-sampler "data/texture/Default_emissive.png")
   (:emissive-factor .3)
   )

  )

#|
<mfiano> so 3 steps for FL code:  [23:16]
<mfiano> 1) write a shader with a struct. and in a function make a binding
	 with :ssbo :std-430 like you saw
<mfiano> 2) use bind-shader-storage-block, passing it the name of the program,
	 the name of the block, and an integer to bind it to  [23:17]
<mfiano> 3) create a buffer, giving it an arbitrary name, and that same
	 integer to bind it to. what this does, is looks up the block bound to
	 that same integer, in order to get its layout, and especially, the
	 size to allocate for the buffer  [23:18]
<mfiano> thats all there is to it
<psilord> Ok, so my understanding was actually not that far off.
<mfiano> those 3 steps are ALL that you need to know. binding happens manually
	 by you  [23:19]
<mfiano> in GL4, it is possible to do the block side binding automatically,
	 but it's only on GL4, and its not in varjo because of that afaik
								        [23:20]
<psilord> Ok I see.
<mfiano> so in our case, we manually bind both sides of the binding
|#
