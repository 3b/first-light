;; -*- mode: common-lisp -*-
(in-package :fl.materials)

(define-material unlit-color
    (:enabled t
     :shader 'fl.shaders:unlit-color)

  ;; No uniform data for this shader.

  )

(define-material unlit-color-decal
    (:enabled t
     :shader 'fl.shaders:unlit-color-decal)

  ;; No uniform data for this shader.

  )

(define-material unlit-texture
    (:enabled t
     :shader 'fl.shaders:unlit-texture)

  ;; Uniform data.
  ;;
  ;; Any :sampler-2d types will ultimately be converted into the right
  ;; thing when this material is used.
  (uniforms
   (:tex.sampler1 "data/texture/debug.png")))

(define-material unlit-texture-decal
    (:enabled t
     :shader 'fl.shaders:unlit-texture-decal)

  ;; Uniform data.
  ;;
  ;; Any :sampler-2d types will ultimately be converted into the right
  ;; thing when this material is used.
  (uniforms
   (:tex.sampler1 "data/texture/debug.png")))


;; NOTE: If there is a problem looking up a material, this is what a material
;; will become to indicate there is a problem.
(define-material missing-material
    (:enabled t
     :shader 'fl.shaders:unlit-texture)

  (uniforms
   (:tex.sampler1 "data/texture/missing-material.png")))



;; When I get the shader for this working I'll comment this in.
#++(define-material pbr-material
       (:enabled t
        :shader :pbr-texture)

     (uniforms
      (:pbr-metallic-roughness.base-color.factor (v4:make .1 .2 .3 1))
      (:pbr-metallic-roughness.base-color.texture "file")
      (:pbr-metallic-roughness.metallic-factor .4)
      (:pbr-metallic-roughness.roughness-factor .7)
      (:pbr-metallic-roughness.metallic-roughness-texture.factor
       (v4:make 0.0 0.0 0.0 0.0))

      (:pbr-metallic-roughness.metallic-roughness-texture.texture "file")

      (:normal.factor (v4:make 1.0 1.0 1.0 1.0))
      (:normal.texture "file3")

      (:occlusion.factor (v4:make 1.0 1.0 1.0 1.0))
      (:occlusion.texture "file4")

      (:emissive (v3:make 0.0 0.0 0.0))
      (:alpha-mode 0.0)
      (:alpha-cutoff .3)))
