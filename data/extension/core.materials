;; -*- mode: common-lisp -*-
(in-package :fl.materials)

(define-material unlit-color
    (:enabled t
     :shader 'fl.shaders:unlit-color)

  ;; No uniform data for this shader.

  )

(define-material unlit-color-decal
    (:enabled t
     :shader 'fl.shaders:unlit-color-decal)

  ;; No uniform data for this shader.

  )

(define-material unlit-texture
    (:enabled t
     :shader 'fl.shaders:unlit-texture)

  ;; Uniform data.
  ;;
  ;; Any :sampler-2d types will ultimately be converted into the right
  ;; thing when this material is used.
  (:tex.sampler1 "data/texture/debug.png"))

(define-material unlit-texture-decal
    (:enabled t
     :shader 'fl.shaders:unlit-texture-decal)

  ;; Uniform data.
  ;;
  ;; Any :sampler-2d types will ultimately be converted into the right
  ;; thing when this material is used.
  (:tex.sampler1 "data/texture/debug.png"))


;; When I get the shader for this working I'll comment this in.
#++(define-material pbr-material
       (:enabled t
        :shader :pbr-texture)

     (:pbr-metallic-roughness.base-color.factor (vec4 .1 .2 .3 1))
     (:pbr-metallic-roughness.base-color.texture "file")
     (:pbr-metallic-roughness.metallic-factor .4)
     (:pbr-metallic-roughness.roughness-factor .7)
     (:pbr-metallic-roughness.metallic-roughness-texture.factor (vec4 0 0 0 0))
     (:pbr-metallic-roughness.metallic-roughness-texture.texture "file")

     (:normal.factor (vec4 1 1 1 1))
     (:normal.texture "file3")

     (:occlusion.factor (vec4 1 1 1 1))
     (:occlusion.texture "file4")

     (:emissive (vec3 0 0 0))
     (:alpha-mode 0)
     (:alpha-cutoff .3))
