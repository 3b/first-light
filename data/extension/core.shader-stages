;; -*- mode: common-lisp -*-

(in-package :fl.shaders)

(defstruct-gpu texture-struct ()
  (sampler1 :sampler-2d :accessor sampler1)
  (sampler2 :sampler-2d :accessor sampler2))

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Vertex stages
;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun-gpu vert/default ((pos :vec3)
                         (normal :vec3)
                         (tangent :vec4)
                         (color :vec4)
                         (uv1 :vec2)
                         (uv2 :vec2)
                         (joints :vec4)
                         (weights :vec4)
                         &uniform
                         (model :mat4)
                         (view :mat4)
                         (proj :mat4))
  (values (* proj view model (vec4 pos 1))
          normal
          tangent
          color
          uv1
          uv2))

;; PBR vertex shader stage:
;;
;; created specifically for the DamagedHelmet model:
;;
;; USE_IBL HAS_NORMALS HAS_UV

(defun-gpu vert/pbr-damaged-helmet (;; Vertex Attributes
                                    (pos :vec3)
                                    (normal :vec3)
                                    (tangent :vec3)
                                    (color :vec4)
                                    (uv1 :vec2)
                                    (uv2 :vec2)
                                    (joints :vec4)
                                    (weights :vec4)
                                    ;; Uniforms
                                    &uniform
                                    (model :mat4)
                                    (normmat :mat4)
                                    (view :mat4)
                                    (proj :mat4))
  (let* ((pvm (* proj view model))
         (world-pos (* model (vec4 pos 1.0)))
         (homo-world-pos (/ (.xyz world-pos) (.w world-pos)))
         (vert-normal
           (normalize (.xyz (* model (vec4 (.xyz normal) 0.0))))))

    (values (* pvm (vec4 pos 1.0))
            vert-normal
            uv1
            world-pos)))

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Fragment stages
;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun-gpu frag/unlit-color ((normal :vec3)
                             (tangent :vec4)
                             (color :vec4)
                             (uv1 :vec2)
                             (uv2 :vec2))
  (values color))


(defun-gpu frag/unlit-color-decal ((normal :vec3)
                                   (tangent :vec4)
                                   (color :vec4)
                                   (uv1 :vec2)
                                   (uv2 :vec2))
  (if (= (.a color) 0)
      (discard)
      (values color)))


(defun-gpu frag/unlit-texture ((normal :vec3)
                               (tangent :vec4)
                               (color :vec4)
                               (uv1 :vec2)
                               (uv2 :vec2)
                               &uniform
                               (tex texture-struct))
  (values (texture (sampler1 tex) uv1)))

(defun-gpu frag/unlit-texture-decal ((normal :vec3)
                                     (tangent :vec4)
                                     (color :vec4)
                                     (uv1 :vec2)
                                     (uv2 :vec2)
                                     &uniform
                                     (tex texture-struct))
  (let ((tex-color (texture (sampler1 tex) uv1)))
    (if (= (.a tex-color) 0)
        (discard)
        (values tex-color))))



(defun-gpu frag/pbr-damaged-helmet ((vert-normal :vec3)
                                    (uv1 :vec2)
                                    (world-pos :vec4)
                                    &uniform
                                    (metallic-roughness-values :vec2)
                                    (metallic-roughness-sampler :sampler-2d)
                                    )
  ;; Metallic and Roughness material properties are packed together
  ;; In glTF, these factors can be specified by fixed scalar values
  ;; or from a metallic-roughness map

  (let* ((perceptual-roughness (.y metallic-roughness-values))
         (metallic (.x metallic-roughness-values))

         ;; damaged-helmet uses a metallic roughness value texture
         (mr-sample (texture metallic-roughness-sampler uv1))
         (perceptual-roughness (* (.g mr-sample) perceptual-roughness))
         (metallic (* (.b mr-sample) metallic))

         (perceptual-roughness (* perceptual-roughness perceptual-roughness))
         (metallic (clamp metallic 0.0 1.0))
         (a (+ (.x vert-normal) (.y vert-normal) (.z vert-normal))))

    ;; machinations to use normal as an identity computation.
    (when (= a 0.0)
      (setf a 1.0))

    (setf a (/ a a))

    ;; test rendering the metallic roughness map
    #++(values (vec4 (/ (.x mr-sample) a)
                  (/ (.y mr-sample) a)
                  (/ (.z mr-sample) a)
                  (.w mr-sample))
	       )
    (values
     mr-sample
     ;;(vec4 perceptual-roughness perceptual-roughness perceptual-roughness 1.0)
     )

    ))
