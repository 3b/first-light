;; -*- mode: common-lisp -*-

(call-flow-definition
    :default (:enabled t)

  (flow initialize-phase
        (flow-state ENTRY/INITIALIZE-PHASE :reset ()
                    (selector nil)
                    (action nil)
                    (transition
                     (lambda (core-state)
                       (declare (ignore core-state))
                       REALIZE-COMPONENTS)))

        (flow-state REALIZE-COMPONENTS :reset ()
                    (selector
                     (lambda (core-state)
                       ;; this will iterate over a hash, and the
                       ;; action will work on the values, which are
                       ;; hashes themselves.
                       (component-initialize-by-type-view core-state)))

                    (action
                     (lambda (core-state component-ht)
                       ;; realize all components in the component-ht.
                       (realize-components core-state component-ht)))

                    (transition
                     (lambda (core-state)
                       (declare (ignorable core-state))
                       REALIZE-ACTORS)))

        (flow-state REALIZE-ACTORS :reset ()
                    (selector
                     (lambda (core-state)
                       (actor-initialize-db core-state)))

                    (action
                     (lambda (core-state inst)
                       (realize-actor core-state inst)))

                    (transition
                     (lambda (core-state)
                       (declare (ignorable core-state))
                       PROTOCOL-INITIALIZE-COMPONENTS)))


        (flow-state PROTOCOL-INITIALIZE-COMPONENTS :reset ()
                    (selector
                     (lambda (core-state)
                       (component-initialize-by-type-view core-state)))

                    (action
                     (lambda (core-state component-ht)
                       (maphash
                        (lambda (k component)
                          (declare (ignore k))
                          (initialize-component component
                                                (context core-state)))
                        component-ht)))

                    (transition
                     (lambda (core-state)
                       (declare (ignorable core-state))
                       REALIZE-PHASE-COMMIT)))

        (flow-state REALIZE-PHASE-COMMIT :reset ()
                    (selector
                     (lambda (core-state)
                       core-state))

                    (action
                     (lambda (core-state inst)
                       (declare (ignore inst))
                       (realize-phase-commit core-state)))

                    (transition
                     (lambda (core-state)
                       (declare (ignorable core-state))
                       EXIT/INITIALIZE-PHASE)))

        (flow-state EXIT/INITIALIZE-PHASE :reset ()
                    (selector NIL)
                    (action NIL)
                    (transition NIL)))

  (flow active-phase
        (flow-state ENTRY/ACTIVE-PHASE :reset ()
                    (selector NIL)
                    (action NIL)
                    (transition
                     (lambda (core-state)
                       (declare (ignore core-state))
                       PHYSICS-LOOP)))

        (flow-state PHYSICS-LOOP :reset ()
                    (selector
                     (lambda (core-state)
                       core-state))

                    (action
                     (lambda (core-state inst)
                       (declare (ignore inst))
                       ;; We enter ONCE here, but box.fm:tick may run more
                       ;; than once as appropriate.
                       (box.fm.tick-placeholder
                        (window (context core-state))
                        (hz (window (context core-state)))
                        (lambda ()
                          ;; Run the user's physics-update protocol
                          (execute-flow core-state
                                        :default
                                        'active-phase
                                        'PROTOCOL-PHYSICS-UPDATE
                                        :come-from-state-name
                                        :EF-PHYSICS-UPDATE)

                          ;; Then update ALL transforms to current
                          ;; local/model
                          (do-nodes #'transform-node
                            (get-component 'transform (scene-tree core-state)))

                          ;; Then, determine if any physics collisions
                          ;; happened and do whatever needs to be done.
                          (execute-flow core-state
                                        :default
                                        'active-phase
                                        'PHYSICS-COLLISIONS
                                        :come-from-state-name
                                        :EF-PHYSICS-COLLISIONS)))))

                    (transition
                     (lambda (core-state)
                       (declare (ignorable core-state))
                       PROTOCOL-UPDATE-COMPONENT)))

        (flow-state PROTOCOL-PHYSICS-UPDATE :reset ()
                    (selector
                     (lambda (core-state)
                       (component-active-view core-state)))

                    (action
                     (lambda (core-state inst)
                       (physics-update-component inst (context core-state))))

                    (transition NIL))

        ;; TODO: PHYSICS-COLLISIONS is not yet implemented, there may be
        ;; more work here than this single state. This will compute
        ;; collisions and then inform the recipients of those
        ;; collisions as desired in the boundary regions components
        ;; (yet to be written).
        (flow-state PHYSICS-COLLISIONS :reset ()
                    (selector NIL)

                    (action
                     (lambda (core-state inst)
                       (declare (ignore core-state inst))
                       (format
                        t "Would have ran flow-state PHYSICS-COLLISIONS.~%")))

                    (transition NIL))

        (flow-state PROTOCOL-UPDATE-COMPONENT :reset ()
                    (selector
                     (lambda (core-state)
                       (component-active-view core-state)))

                    (action
                     (lambda (core-state inst)
                       (update-component inst (context core-state))))

                    (transition
                     (lambda (core-state)
                       (declare (ignorable core-state))
                       PROTOCOL-RENDER-COMPONENT)))

        (flow-state PROTOCOL-RENDER-COMPONENT :reset ()
                    (selector
                     (lambda (core-state)
                       (component-active-view core-state)))

                    (action
                     (lambda (core-state inst)
                       (render-component inst (context core-state))))

                    (transition
                     (lambda (core-state)
                       (declare (ignorable core-state))
                       EXIT/ACTIVE-PHASE)))

        (flow-state EXIT/ACTIVE-PHASE :reset ()
                    (selector NIL)
                    (action NIL)
                    (transition NIL)))

  (flow perform-one-frame
        (flow-state ENTRY/PERFORM-ONE-FRAME :reset ()
                    (selector
                     (lambda (core-state)
                       core-state))

                    (action
                     (lambda (core-state inst)
                       (declare (ignore inst))
                       (execute-flow core-state
                                     :default
                                     'initialize-phase
                                     'ENTRY/INITIALIZE-PHASE
                                     :come-from-state-name
                                     :EF-REALIZE-PHASE)))

                    (transition
                     (lambda (core-state)
                       (declare (ignorable core-state))
                       ACTIVE-PHASE)))

        (flow-state ACTIVE-PHASE :reset ()
                    (selector
                     (lambda (core-state)
                       core-state))

                    (action
                     (lambda (core-state inst)
                       (declare (ignore inst))
                       (execute-flow core-state
                                     :default
                                     'active-phase
                                     'ENTRY/ACTIVE-PHASE
                                     :come-from-state-name
                                     :EF-ACTIVE-PHASE)))

                    (transition
                     (lambda (core-state)
                       (declare (ignorable core-state))
                       EXIT/DO-NEXT-FRAME)))

        (flow-state EXIT/DO-NEXT-FRAME :reset ()
                    (selector NIL)
                    (action NIL)
                    (transition NIL))

        (flow-state EXIT/GAME-OVER :reset ()
                    (selector NIL)
                    (action NIL)
                    (transition NIL))))
