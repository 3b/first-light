(in-package :first-light.shader)

(defstruct mesh-test/light
  (directional :int :accessor light-directional)
  (position :vec3 :accessor light-position)
  (color :vec3 :accessor light-color)
  (ambience :vec3 :accessor light-ambience))

(defstruct mesh-test/textures
  (diffuse :sampler-2d :accessor tex-diffuse)
  (specular :sampler-2d :accessor tex-specular)
  (normal :sampler-2d :accessor tex-normal))

(defun mesh-test/vert ((pos :vec3)
                       (normal :vec3)
                       (tangent :vec4)
                       (color :vec4)
                       (uv1 :vec2)
                       (uv2 :vec2)
                       (joints :vec4)
                       (weights :vec4)
                       &uniform
                       (model :mat4)
                       (view :mat4)
                       (proj :mat4))
  (let* ((model-view (* view model))
         (normal-matrix (transpose (inverse (mat3 model-view))))
         (surface-to-world (mat3 1.0))
         (model-pos (* model (vec4 pos 1))))
    (setf (aref surface-to-world 0) (normalize (vec3 (* model tangent)))
          (aref surface-to-world 2) (normalize (* normal-matrix normal))
          (aref surface-to-world 1) (normalize (cross (aref surface-to-world 2)
                                                      (aref surface-to-world 0))))
    (values (* proj model-view (vec4 pos 1))
            model-pos
            (inverse view)
            uv1
            surface-to-world)))

(defun mesh-test/frag ((model-pos :vec4)
                       (view-inv :mat4)
                       (uv :vec2)
                       (surface-to-world :mat3)
                       &uniform
                       (tex mesh-test/textures)
                       (light mesh-test/light))
  (let* ((diffuse-map (texture (tex-diffuse tex) uv))
         (spec-map (texture (tex-specular tex) uv))
         (normal-map (vec3 (1- (* (texture (tex-normal tex) uv) 2.0))))
         (view-dir (vec3 (normalize (- (* view-inv (vec4 0 0 0 1)) model-pos))))
         (normal-dir (normalize (* surface-to-world normal-map)))
         (surface-to-light (normalize (light-position light)))
         (ambience (light-ambience light))
         (diffuse-factor (max 0 (dot normal-dir surface-to-light)))
         (diffuse (* (light-color light) (.rgb diffuse-map) diffuse-factor))
         (reflection (reflect (- surface-to-light) normal-dir))
         (specular-factor (pow (max 0 (dot reflection view-dir)) (* (.a spec-map) 16)))
         (specular (* (light-color light) (.rgb spec-map) specular-factor)))
    (vec4 (+ ambience diffuse specular) (.a diffuse-map))))

(define-shader mesh-test (:version 430)
  (:vertex (mesh-test/vert :vec3 :vec3 :vec4 :vec4 :vec2 :vec2 :vec4 :vec4))
  (:fragment (mesh-test/frag :vec4 :mat4 :vec2 :mat3)))
