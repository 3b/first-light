(in-package #:virality.engine)

;;; NOTE: Each user protocol function below is generic for maximum flexibility.
;;; They can take 1 of 3 objects to operate on:
;;; 1. A transform component to directly manipulate.
;;; 2. An actor object, since it is assumed that actor transforms are permanent
;;; once the flows add one to an actor.
;;; 3. Any arbitrary component, in which case an attempt is made to access it's
;;; actor's transform component. In the case of a "floating" component with no
;;; actor, a runtime error is caught to prevent unintutive late errors.

;;; This flexibility will allow for less mistakes and also clean up component
;;; protocol call sites; for example, it is not always necessary to cache a copy
;;; of a transform component in a component. Users may still want to do so to
;;; minimize any overhead in finding that transform on each invocation of a
;;; transform API call, but we shouldn't force them to.

(defgeneric get-model-matrix (object &key)
  (:method ((object c/xform:transform) &key copy)
    (c/xform::%get-model-matrix object copy))
  (:method ((object actor) &key copy)
    (let ((transform (component-by-type object 'c/xform:transform)))
      (c/xform::%get-model-matrix transform copy)))
  (:method ((object component) &key copy)
    (a:if-let ((actor (actor object)))
      (let ((transform (component-by-type actor 'c/xform:transform)))
        (c/xform::%get-model-matrix transform copy))
      (error "Component ~a is not currently attached to an actor." object))))

(defgeneric get-translation (object &key)
  (:method ((object c/xform:transform) &key copy)
    (c/xform::%get-translation object copy))
  (:method ((object actor) &key copy)
    (let ((transform (component-by-type object 'c/xform:transform)))
      (c/xform::%get-translation transform copy)))
  (:method ((object component) &key copy)
    (a:if-let ((actor (actor object)))
      (let ((transform (component-by-type actor 'c/xform:transform)))
        (c/xform::%get-translation transform copy))
      (error "Component ~a is not currently attached to an actor." object))))

(defgeneric get-rotation (object &key)
  (:method ((object c/xform:transform) &key copy)
    (c/xform::%get-rotation object copy))
  (:method ((object actor) &key copy)
    (let ((transform (component-by-type object 'c/xform:transform)))
      (c/xform::%get-rotation transform copy)))
  (:method ((object component) &key copy)
    (a:if-let ((actor (actor object)))
      (let ((transform (component-by-type actor 'c/xform:transform)))
        (c/xform::%get-rotation transform copy))
      (error "Component ~a is not currently attached to an actor." object))))

(defgeneric get-scale (object &key)
  (:method ((object c/xform:transform) &key copy)
    (c/xform::%get-scale object copy))
  (:method ((object actor) &key copy)
    (let ((transform (component-by-type object 'c/xform:transform)))
      (c/xform::%get-scale transform copy)))
  (:method ((object component) &key copy)
    (a:if-let ((actor (actor object)))
      (let ((transform (component-by-type actor 'c/xform:transform)))
        (c/xform::%get-scale transform copy))
      (error "Component ~a is not currently attached to an actor." object))))

(defgeneric translate (object vec &key)
  (:method ((object c/xform:transform) vec &key (space :model) replace instant)
    (c/xform::%translate object vec space replace instant))
  (:method ((object actor) vec &key (space :model) replace instant)
    (let ((transform (component-by-type object 'c/xform:transform)))
      (c/xform::%translate transform vec space replace instant)))
  (:method ((object component) vec &key (space :model) replace instant)
    (a:if-let ((actor (actor object)))
      (let ((transform (component-by-type actor 'c/xform:transform)))
        (c/xform::%translate transform vec space replace instant))
      (error "Component ~a is not currently attached to an actor." object))))

(defgeneric translate/velocity (object axis rate)
  (:method ((object c/xform:transform) axis rate)
    (c/xform::%translate/velocity object axis rate))
  (:method ((object actor) axis rate)
    (let ((transform (component-by-type object 'c/xform:transform)))
      (c/xform::%translate/velocity transform axis rate)))
  (:method ((object component) axis rate)
    (a:if-let ((actor (actor object)))
      (let ((transform (component-by-type actor 'c/xform:transform)))
        (c/xform::%translate/velocity transform axis rate))
      (error "Component ~a is not currently attached to an actor." object))))

(defgeneric rotate (object quat &key)
  (:method ((object c/xform:transform) quat &key (space :model) replace instant)
    (c/xform::%rotate object quat space replace instant))
  (:method ((object actor) quat &key (space :model) replace instant)
    (let ((transform (component-by-type object 'c/xform:transform)))
      (c/xform::%rotate transform quat space replace instant)))
  (:method ((object component) quat &key (space :model) replace instant)
    (a:if-let ((actor (actor object)))
      (let ((transform (component-by-type actor 'c/xform:transform)))
        (c/xform::%rotate transform quat space replace instant))
      (error "Component ~a is not currently attached to an actor." object))))

(defgeneric rotate/velocity (object axis rate)
  (:method ((object c/xform:transform) axis rate)
    (c/xform::%rotate/velocity object axis rate))
  (:method ((object actor) axis rate)
    (let ((transform (component-by-type object 'c/xform:transform)))
      (c/xform::%rotate/velocity transform axis rate)))
  (:method ((object component) axis rate)
    (a:if-let ((actor (actor object)))
      (let ((transform (component-by-type actor 'c/xform:transform)))
        (c/xform::%rotate/velocity transform axis rate))
      (error "Component ~a is not currently attached to an actor." object))))

(defgeneric scale (object vec &key)
  (:method ((object c/xform:transform) vec &key (space :model) replace instant)
    (c/xform::%scale object vec space replace instant))
  (:method ((object actor) vec &key (space :model) replace instant)
    (let ((transform (component-by-type object 'c/xform:transform)))
      (c/xform::%scale transform vec space replace instant)))
  (:method ((object component) vec &key (space :model) replace instant)
    (a:if-let ((actor (actor object)))
      (let ((transform (component-by-type actor 'c/xform:transform)))
        (c/xform::%scale transform vec space replace instant))
      (error "Component ~a is not currently attached to an actor." object))))

(defgeneric scale/velocity (object axis rate)
  (:method ((object c/xform:transform) axis rate)
    (c/xform::%scale/velocity object axis rate))
  (:method ((object actor) axis rate)
    (let ((transform (component-by-type object 'c/xform:transform)))
      (c/xform::%scale/velocity transform axis rate)))
  (:method ((object component) axis rate)
    (a:if-let ((actor (actor object)))
      (let ((transform (component-by-type actor 'c/xform:transform)))
        (c/xform::%scale/velocity transform axis rate))
      (error "Component ~a is not currently attached to an actor." object))))

(defgeneric transform-point (object point &key)
  (:documentation "Transform the vector in POINT, assumed to be in the local
space of the TRANSFORM, to world space and returns the new vector. The new
vector is affected by scale, rotation, and translation. A newly allocated M:VEC3
is returned.")
  (:method ((object c/xform:transform) point &key (space :model))
    (c/xform::%transform-point object point space))
  (:method ((object actor) point &key (space :model))
    (let ((transform (component-by-type object 'c/xform:transform)))
      (c/xform::%transform-point transform point space)))
  (:method ((object component) point &key (space :model))
    (a:if-let ((actor (actor object)))
      (let ((transform (component-by-type actor 'c/xform:transform)))
        (c/xform::%transform-point transform point space))
      (error "Component ~a is not currently attached to an actor." object))))

(defgeneric transform-vector (object vector &key)
  (:documentation "Transform the vector in VECTOR, assumed to be in the local
space of the TRANSFORM, to world space and return it. The new vector is affected
by scale and rotation, but not by translation. A newly allocated M:VEC3 is
returned.")
  (:method ((object c/xform:transform) vector &key (space :model))
    (c/xform::%transform-vector object vector space))
  (:method ((object actor) vector &key (space :model))
    (let ((transform (component-by-type object 'c/xform:transform)))
      (c/xform::%transform-vector transform vector space)))
  (:method ((object component) vector &key (space :model))
    (a:if-let ((actor (actor object)))
      (let ((transform (component-by-type actor 'c/xform:transform)))
        (c/xform::%transform-vector transform vector space))
      (error "Component ~a is not currently attached to an actor." object))))

(defgeneric transform-direction (object direction &key)
  (:documentation "Transform the vector in DIRECTION, assumed to be in the local
space of the TRANSFORM, to the world space and return it. The new vector is
affected only by rotation, and not by translation or scale. A newly allocated
M:VEC3 is returned.")
  (:method ((object c/xform:transform) direction &key (space :model))
    (c/xform::%transform-direction object direction space))
  (:method ((object actor) direction &key (space :model))
    (let ((transform (component-by-type object 'c/xform:transform)))
      (c/xform::%transform-direction transform direction space)))
  (:method ((object component) direction &key (space :model))
    (a:if-let ((actor (actor object)))
      (let ((transform (component-by-type actor 'c/xform:transform)))
        (c/xform::%transform-direction transform direction space))
      (error "Component ~a is not currently attached to an actor." object))))

(defgeneric transform-forward (object)
  (:documentation "Return the forward vector (-Z axis) in world space for this
                  TRANSFORM.")
  (:method ((object c/xform:transform))
    (c/xform::%transform-forward object))
  (:method ((object actor))
    (let ((transform (component-by-type object 'c/xform:transform)))
      (c/xform::%transform-forward transform)))
  (:method ((object component))
    (a:if-let ((actor (actor object)))
      (let ((transform (component-by-type actor 'c/xform:transform)))
        (c/xform::%transform-forward transform))
      (error "Component ~a is not currently attached to an actor." object))))

(defgeneric transform-backward (object)
  (:documentation "Return the backward vector (+Z axis) in world space for this
                  TRANSFORM.")
  (:method ((object c/xform:transform))
    (c/xform::%transform-backward object))
  (:method ((object actor))
    (let ((transform (component-by-type object 'c/xform:transform)))
      (c/xform::%transform-backward transform)))
  (:method ((object component))
    (a:if-let ((actor (actor object)))
      (let ((transform (component-by-type actor 'c/xform:transform)))
        (c/xform::%transform-backward transform))
      (error "Component ~a is not currently attached to an actor." object))))

(defgeneric transform-up (object)
  (:documentation "Return the up vector (+Y axis) in world space for this
                  TRANSFORM.")
  (:method ((object c/xform:transform))
    (c/xform::%transform-up object))
  (:method ((object actor))
    (let ((transform (component-by-type object 'c/xform:transform)))
      (c/xform::%transform-up transform)))
  (:method ((object component))
    (a:if-let ((actor (actor object)))
      (let ((transform (component-by-type actor 'c/xform:transform)))
        (c/xform::%transform-up transform))
      (error "Component ~a is not currently attached to an actor." object))))

(defgeneric transform-down (object)
  (:documentation "Return the down vector (-Y axis) in world space for this
                  TRANSFORM.")
  (:method ((object c/xform:transform))
    (c/xform::%transform-down object))
  (:method ((object actor))
    (let ((transform (component-by-type object 'c/xform:transform)))
      (c/xform::%transform-down transform)))
  (:method ((object component))
    (a:if-let ((actor (actor object)))
      (let ((transform (component-by-type actor 'c/xform:transform)))
        (c/xform::%transform-down transform))
      (error "Component ~a is not currently attached to an actor." object))))

(defgeneric transform-right (object)
  (:documentation "Return the right vector (+X axis) in world space for this
                  TRANSFORM.")
  (:method ((object c/xform:transform))
    (c/xform::%transform-right object))
  (:method ((object actor))
    (let ((transform (component-by-type object 'c/xform:transform)))
      (c/xform::%transform-right transform)))
  (:method ((object component))
    (a:if-let ((actor (actor object)))
      (let ((transform (component-by-type actor 'c/xform:transform)))
        (c/xform::%transform-right transform))
      (error "Component ~a is not currently attached to an actor." object))))

(defgeneric transform-left (object)
  (:documentation "Return the left vector (+X axis) in world space for this
                  TRANSFORM.")
  (:method ((object c/xform:transform))
    (c/xform::%transform-left object))
  (:method ((object actor))
    (let ((transform (component-by-type object 'c/xform:transform)))
      (c/xform::%transform-left transform)))
  (:method ((object component))
    (a:if-let ((actor (actor object)))
      (let ((transform (component-by-type actor 'c/xform:transform)))
        (c/xform::%transform-left transform))
      (error "Component ~a is not currently attached to an actor." object))))
