;;;; -*- mode: common-lisp -*-

(call-flow-definition
    ;; name is a keyword, then options.
    :default (:enabled t)

  (flow a-test-flow
        (flow-state TEST-INSTANCE :reset ()
                    (selector
                     (lambda (core-state)
                       (declare (ignorable core-state))
                       (format t "Selector function called.~%")
                       42))

                    (action
                     (lambda (core-state inst)
                       (format t "Action function called.~%")
                       (test-protocol-method-0 inst
                                               (context core-state))))

                    (transition
                     (lambda (core-state)
                       (declare (ignore core-state))
                       (format t "Transition function called.~%")
                       TEST-HT)))

        (flow-state TEST-HT :reset ()
                    (selector
                     (lambda (core-state)
                       (declare (ignorable core-state))
                       (format t "Selector function called.~%")
                       (let ((ht (make-hash-table)))
                         (loop :for i :in '(1 2 3)
                               :do (setf (gethash i ht) (+ i 10)))
                         ht)))

                    (action
                     (lambda (core-state inst)
                       (format t "Action function called.~%")
                       (test-protocol-method-1 inst
                                               (context core-state))))

                    (transition
                     (lambda (core-state)
                       (declare (ignore core-state))
                       (format t "Transition function called.~%")
                       TEST-LIST-INSTANCES)))

        (flow-state TEST-LIST-INSTANCES :reset ()
                    (selector
                     (lambda (core-state)
                       (declare (ignorable core-state))
                       (format t "Selector function called.~%")
                       (list 1 2 3)))

                    (action
                     (lambda (core-state inst)
                       (format t "Action function called.~%")
                       (test-protocol-method-0 inst
                                               (context core-state))))

                    (transition
                     (lambda (core-state)
                       (declare (ignore core-state))
                       (format t "Transition function called.~%")
                       TEST-LIST-HT)))

        (flow-state TEST-LIST-HT :reset ()
                    (selector
                     (lambda (core-state)
                       (declare (ignorable core-state))
                       (format t "Selector function called.~%")
                       (loop :for j :below 3
                             :collect
                             (let ((ht (make-hash-table)))
                               (loop :for i :in '(1 2 3)
                                     :do (setf (gethash i ht)
                                               (+ i (* j 10))))
                               ht))))

                    (action
                     (lambda (core-state inst)
                       (format t "Action function called.~%")
                       (test-protocol-method-1 inst
                                               (context core-state))))

                    (transition
                     (lambda (core-state)
                       (declare (ignore core-state))
                       (format t "Transition function called.~%")
                       EXIT/FLOW-FINISHED)))

        (flow-state EXIT/FLOW-FINISHED :reset ()
                    (selector NIL )
                    (action NIL)
                    (transition NIL))))
