* Core Extensions

** Extension Types
Virality Engine has a variety of extensions, which are mini languages used to
modify the behavior of different engine features. Below are the list of
extension types Virality Engine has. Click on any extension type name to go to a
more in-depth explanation of that particular extension.

*** [[Settings Extension]]
Provides a key/value store, used by the core engine, various components, and the user for keeping
track of game settings. The key must be a symbol, and internally gets converted to a keyword symbol.
The value may be any object. This extension is always loaded first.

*** [[Shader Extension]]
Defines OpenGL Shader Language (GLSL) stages and programs.

There are two shader extensions: =shader-stages= and =shader-programs=. The first is loaded before the
second. The =shader-stages= extension is where you use =defstruct-gpu= and =defun-gpu= to define vertex,
geometry, tessellation, fragment, etc shader stages. Then, in =shader-programs= you use =define-shader=
to wire together the stages into full shader programs. Each of these files should have an =in-package=
at the top indicating what packages the stages and programs are in. Then, you must specify the
package qualified shader name in the scene file to use it.

*** [[Graphs]]
Graphs are grouped into categories, and all graphs of a particular category are
effectively unioned together. Graphs may be described as sets of named subgraphs
that can be spliced together to form the larger graph. This makes it easy for a
human to manage the graph structure. An important graph category is the
=component-dependency= graph. This allows the user to specify component type names
in a graph in order to indicate in what order (via topological sort) the types
should be updated in the Virality Engine component protocol.

*** [[Call-Flow]]
Describes a finite state machine. Each state has a selector, action, and transition function. The
selector function returns a collection of items or collections, the action is called on each one in
an intuitive manner, and the transition returns to which state the state machine should transition.
The call-flow driver will intelligently and repeatedly call the action over the instances in the
collections.

*** [[Scene]]
Describes a game scene. This consists of a hierarchical view of all the game actors, and each of
their components. For more details and examples, please see [[Scene Format]].

*** [[Extension Order]]

The load order of extension types is important. The following constraints should be maintained while
modifying =prepare-extensions=.

- The =settings= extension must be loaded before all others so that the process of loading subsequent
  extensions can refer to settings.

- The =graphs= extension must be loaded before the =scene= extension, since the process of spawning
  actors and components needs to know about which types are referenced in the =component-type= graph.

- The =shader-stages= extension must be loaded before the =shader-programs= extension. And both of them
  have to happen before the =scene= extension.
